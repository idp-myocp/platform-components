global:
  # -- Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.
  clusterRouterBase: app.example.com
  # -- Custom hostname shorthand, overrides `global.clusterRouterBase`, `upstream.ingress.host`, `route.host`, and url values in `upstream.backstage.appConfig`
  host: ""
  github:
    token: changeme
    appId: appid
    clientId: clientId
    clientSecret: clientSecret
    webhookUrl: webhookUrl
    webhookSecret: webhookSecret

  keycloak:
    prefixBaseUrl: "https://sso.myocp.net"
    backstageClient:
      id: "backstage"
      realm: OpenShift
      secret: my-secret
      oidcIssuerUrl: "https://sso.myocp.net/realms/OpenShift"

dynamic:
      plugins:
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: true

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: backstage
  backstage:
    image:
      registry: image-registry.openshift-image-registry.svc:5000
      repository: developer-hub/backstage-showcase
      tag: latest
    command: []
    # FIXME (tumido): USE POSTGRES_PASSWORD and POSTGRES_USER instead of POSTGRES_ADMIN_PASSWORD
    # This is a hack. In {fedora,rhel}/postgresql images, regular user is forbidden
    # from creating DBs in runtime. A single DB can be created ahead of time via
    # POSTGRESQL_DATABASE env variable (in this case via
    # upstream.postgresql.primary.extraEnvVars value), but this doesn't allow us to
    # create multiple DBs. Since Backstage requires by default 5 different DBs, we
    # can't accommodate that properly.
    appConfig:
      app:
        # Please update to match host in case you don't want to configure hostname via `global.clusterRouterBase` or `global.host`.
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'

      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          client: pg
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
            host: "{{ .Release.Name }}-db-postgresql" #Matches with the host of the deployed postgresql instance
            port: 5432
            ssl:
              ca: ${CA_CERT}
              require: true
              rejectUnauthorized: true
        auth:
          keys:
            - secret: u95WN24xnXu7OUQL5ji1qAAVC3TF9Re6

      integrations:
        github:
          - host: github.com
            apps:
              - appId: "{{ .Values.global.github.appId }}"
                clientId: "{{ .Values.global.github.clientId }}"
                clientSecret: "{{ .Values.global.github.clientSecret }}"
                webhookUrl: "{{ .Values.global.github.webhookUrl }}"
                webhookSecret: "{{ .Values.global.github.webhookSecret }}"
                privateKey: |
                      -----BEGIN RSA PRIVATE KEY-----
                      MIIEpAIBAAKCAQEA3rKMqfpF4QilsNuMQziIoSUI5193Xx2HrpurmrORijL+F8Qk
                      YvLWiikPmvZ7ibKQdk47DcPWkUoYe8zKFZQEQD2fXROnXpxVRDLWXU1MucBdGKFM
                      46er0RfvZoC2tKMwjCcUIJWXN7JhoQNX5zz397bH2gp7YbLFoW2QAX7OyTyLSLyT
                      uVxrCh8iMxkWXWkKaWBAzFVxQdGd3rr/RUeZSrHIQtduSpVzWhAvBqadhsHYziXk
                      5mkhIf7gcOsoAp4YR/tnzewmGlbP6GXdL0vt3tbDglul/UvSK9B2unuGww+tgEVF
                      Dx75tC+bn6PeRa+KcNQxGgWg0OgKwzVFefvjpwIDAQABAoIBAEqEAg9KQCGZTB/O
                      hrNjckxBYSZSSlYYQnNJgXUlSriscVswdWBqkyDttlwKx7F+f1omuRnVArHg0ipy
                      jtgDjByWwgFZ9zHwK5PDUvkrSVYKKNx59IlkbFhtotxwizIMPM1YsiJpC41GceZ3
                      gO1N+Eb58QtjYH+DWx+10m69qKGqsaBaNJSInXFcqOFEcxPdTBy9F9eDwUaSA0cZ
                      KHLzKlgPWM9hio92BO4i+uqe2jawnExSqG3Bzdy0v/3RL+4fyFMNKeCekZhaW0nJ
                      cKXQhBAITzQUSXGSFvX8y2UPDC7VnDepXARp8gZSHOl26/09IeAzzihcPloBPLv+
                      vjcH8VECgYEA+LhStpMnNJo7yEe35ibnarZ3kJhTB90K8ye4fYDtdXu2SNcv/2Rf
                      Rp4N+fxSLHRoWngYJzlZPAASpQDvsrKepQPD2YNMnPP/+HkEOcBvxJlkkCn4lcgG
                      b4vzoL0CzQGxENwg92lm36KF2xL2oesHLmGreEBm3P1Xe3tZmT94VD8CgYEA5Tc8
                      zYhNcr7TpZdniPSOKXm3JgioIIs6Gf2TA3DjIZx19b12K2BooBhu21p2kRxPQWj9
                      TojJwwnSBwmoP6esWWYT5HjG8d3nAikPZsKVlNdVDDiUxuWT7AbpiGT95nTlNoN1
                      neK6ZYDnRYiOxdxa1LrXWY2PIwN9zXQzwzqj9pkCgYEAmTF+0LGGXmH5HH0ACiRA
                      OXw13LvVuGwviGEYw0Sb/da7CdZw289I18gWN7lwK61vcPmzdsVd7xTkZvlSqjBW
                      grD0+o5iq/Gl4bc4IRIkRWVtiVYwpKDVRfNflcuVZAv8sbPEIl+rW2dRJwRhII4Q
                      mELUSHbyZH8uWQI6x6dOSCUCgYB1aUAKAAG7/yemsNFmA+82K5S3NMP6N5cBbTR7
                      FL4jn2OFBxGa0n2FVD6kucf2OMwYM1Fdgw/migc9d6LpSFguSu1xoLQ3fHUyVBoB
                      hzbb0RlNc0YyQ7Lrufax2Rl9jO9EZz4+K79S8x6ELZkEnQUh5rscsjhZtRYhwZ4q
                      KMWIMQKBgQCgs4uGuExRNT5/3XQCDEyvwgdvnpppqjAB03bZGfvvpplA8EUDJojJ
                      4LKR4Y28J7r/j1TGiX7QiwAxkoF2r3l5q9lHGK3k0XsD+56bXgP/pwhysE7K2wyG
                      e+4sMbeWzb3wDyf98P6x/dl/xDa8Lbj0E6bcr1O3ZGk+4jhJN3G8cQ==
                      -----END RSA PRIVATE KEY-----
      catalog:
        import: 
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, Group, Resource, Location, Template, API]
        locations:
          - type: url
            target: https://github.com/idp-myocp/backstage-showcase/blob/main/catalog-entities/all.yaml
          - type: url
            target: https://github.com/idp-myocp/goldenpath-template/blob/main/template-index.yaml
        providers:
          keycloakOrg:
            default:
              baseUrl: "{{ .Values.global.keycloak.prefixBaseUrl }}"
              loginRealm: "{{ .Values.global.keycloak.backstageClient.id }}"
              realm: "{{ .Values.global.keycloak.backstageClient.realm }}"
              clientId: "{{ .Values.global.keycloak.backstageClient.id }}"
              clientSecret: "{{ .Values.global.keycloak.backstageClient.secret }}"
              schedule:
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
          github:
            systems:
              organization: 'idp-myocp' # string
              catalogPath: '/systems/*.yaml' # string
              filters:
                branch: 'main' # string
                repository: 'demo-systems' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
            systemEntities:
              organization: 'idp-myocp' # string
              catalogPath: '/catalog-info.yaml' # string
              filters:
                branch: 'master' # string
                repository: '.*' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
      auth:
        environment: production
        providers:
          oauth2Proxy: {}

    extraEnvVars:
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: "{{ .Release.Name }}-db-postgresql"
    - name: GITHUB_PRIVATEKEY
      valueFrom:
         secretKeyRef:
           key: idp-private-key
           name: "{{ .Release.Name }}-idp-github"
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          key: token
          name: "{{ .Release.Name }}-git-auth"
    - name: CA_CERT
      valueFrom:
        secretKeyRef:
          key: ca.crt
          name: "{{ .Release.Name }}-db-postgresql-tls" # Should match with the name of the secret where the CA for the postgresql server is stored
    - name: CONFLUENCE_URL
      value: "{{ .Values.global.backstage.confluence.url }} "
    - name: CONFLUENCE_USERNAME
      value: "{{ .Values.global.backstage.confluence.user }} "
    - name: CONFLUENCE_PASSWORD
      value: "{{ .Values.global.backstage.confluence.password }} "
    extraContainers:
    - name: "oauth2-proxy"
      env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "{{ .Values.global.keycloak.backstageClient.id }}"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: "{{ .Values.global.keycloak.backstageClient.secret }}"
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: 'fksdZJWUhzlfGw3Ve6POYc2jmjZogjCh'
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: "{{ .Values.global.keycloak.backstageClient.oidcIssuerUrl }}"
        - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
          value: 'true'
      ports:
        - name: "oauth2-proxy"
          containerPort: 4180
          protocol: TCP
      imagePullPolicy: IfNotPresent
      image: "quay.io/oauth2-proxy/oauth2-proxy:latest"
      args:
        - '--provider=oidc'
        - '--email-domain=*'
        - '--upstream=http://localhost:7007'
        - '--http-address=0.0.0.0:4180'
        - '--skip-provider-button'

  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy

  postgresql:
    enabled: false #Disabled when using an external connection

  ingress:
    enabled: false

# -- OpenShift Route parameters
route:

  # -- Route specific annotations
  annotations: {}

  # -- Enable the creation of the route resource
  enabled: true

  # -- Set the host attribute to a custom value. If not set, OpenShift will generate it, please make sure to match your baseUrl
  host: "{{ .Values.global.host }}"

  # -- Path that the router watches for, to route traffic for to the service.
  path: "/"

  # -- Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
  wildcardPolicy: None

  # -- Route TLS parameters
  # <br /> Ref: https://docs.openshift.com/container-platform/4.9/networking/routes/secured-routes.html
  tls:

    # -- Enable TLS configuration for the host defined at `route.host` parameter
    enabled: true

    # -- Specify TLS termination.
    termination: "edge"

    # -- Certificate contents
    certificate: ""

    # -- Key file contents
    key: ""

    # -- Cert authority certificate contents. Optional
    caCertificate: ""

    # -- Contents of the ca certificate of the final destination.
    # <br /> When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
    destinationCACertificate: ""

    # --  Indicates the desired behavior for insecure connections to a route.
    # <br /> While each router may make its own decisions on which ports to expose, this is normally port 80. The only valid values are None, Redirect, or empty for disabled.
    insecureEdgeTerminationPolicy: "Redirect"

github:
  token: "{{ .Values.global.github.token }}"