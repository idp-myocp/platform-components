global:
  # -- Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.
  clusterRouterBase: app.example.com
  # -- Custom hostname shorthand, overrides `global.clusterRouterBase`, `upstream.ingress.host`, `route.host`, and url values in `upstream.backstage.appConfig`
  host: ""
  github:
    token: changeme
    appId: appid
    clientId: clientId
    clientSecret: clientSecret
    webhookUrl: webhookUrl
    webhookSecret: webhookSecret

  keycloak:
    prefixBaseUrl: "https://sso.myocp.net"
    backstageClient:
      id: "backstage"
      realm: OpenShift
      secret: my-secret
      oidcIssuerUrl: "https://sso.myocp.net/realms/OpenShift"

dynamic:
      plugins:
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: true

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: backstage
  backstage:
    image:
      registry: image-registry.openshift-image-registry.svc:5000
      repository: developer-hub/backstage-showcase
      tag: latest
    command: []
    # FIXME (tumido): USE POSTGRES_PASSWORD and POSTGRES_USER instead of POSTGRES_ADMIN_PASSWORD
    # This is a hack. In {fedora,rhel}/postgresql images, regular user is forbidden
    # from creating DBs in runtime. A single DB can be created ahead of time via
    # POSTGRESQL_DATABASE env variable (in this case via
    # upstream.postgresql.primary.extraEnvVars value), but this doesn't allow us to
    # create multiple DBs. Since Backstage requires by default 5 different DBs, we
    # can't accommodate that properly.
    appConfig:
      app:
        # Please update to match host in case you don't want to configure hostname via `global.clusterRouterBase` or `global.host`.
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'

      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          client: pg
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
            host: "{{ .Release.Name }}-db-postgresql" #Matches with the host of the deployed postgresql instance
            port: 5432
            ssl:
              ca: ${CA_CERT}
              require: true
              rejectUnauthorized: true
        auth:
          keys:
            - secret: u95WN24xnXu7OUQL5ji1qAAVC3TF9Re6

      integrations:
        github:
          - host: github.com
            apps:
              - appId: "{{ .Values.global.github.appId }}"
                clientId: "{{ .Values.global.github.clientId }}"
                clientSecret: "{{ .Values.global.github.clientSecret }}"
                webhookUrl: "{{ .Values.global.github.webhookUrl }}"
                webhookSecret: "{{ .Values.global.github.webhookSecret }}"
                privateKey: |
                    -----BEGIN RSA PRIVATE KEY-----
                    MIIEogIBAAKCAQEAxL99Vo+WaGgwLgWmxPWn4/lciDCm2/QL6/KNErurjVHF4N9X
                    7qzVeazrSMI6GkSA1PNs5mwOdwLU4z5Dh+Pf8v5GIbgE6BPtFmmjhlmAYltSsC2S
                    CUdOZhw363wDJoUCG7/uuora6nfNcjPyy4SToJ94STO+jp+kmpyg+jcHS6u/gdcK
                    wJMnXGl3k61eSmBH3aIG0QApyQwc7Hd5HW33YWdeIW8JwLEIxTGFPQJr5C7aYtTH
                    M3YmHtza+uJaRvOXk61qKjRpR/ZUJ1lXYLcfZsF8caaA8u+9Z+6KEvnU27Le1ji4
                    8kLASALzjo1j3G14OJyWU+FOFbrGpjZx+QdH5QIDAQABAoIBAA0c9i2exFeRGiT3
                    G3ZlKRt4s0Ige/6M9X50XBKzj2uL17R1LlcqDdBeRhBDYbv+dNe8obV53jzwY2AB
                    9l5IQdTgPaxhp3IQYezsfYmmzXfAvnIfl2wm5ILJvrBjQ5J9qvZOhIrKVmzqLzc9
                    XyFRZMV/23SFjl3TJhVn+xKyODpCyi24zHkHHy6E5rmajz3EwoI5LHhPohluwS7Y
                    Yr++HQiD9iXQi34fL6q7NgBCspv+8mlrYM42FsXnjUkUkqxowc9dFLMBNQdwMBSH
                    ct/3PqL8TkFR1EIMOjXnamdkMMG9V3pfiA9IS9L22r4wg2JY96qScA6ZeGenZ1Q6
                    15Y8hgECgYEA8x0enbD5Byk4DYsOEmcNmgbmp5JTh9KvNSp88Sndq3lqr/InYZnT
                    7MI2wwV7/VhNJzBm6AzHbV9ilXDWbeVGCMCK1u/ioqZ4DFWR1vCwTswuPldzXnoK
                    XK0j2wkibXmw9GH1YjNDOyNMc3rJ7C3TwQF6JwgHQB6s7DhXkcrrul0CgYEAzy04
                    TCIlXcJtHxpdIxPZsh5Amywl7WMW5CXBPHTrcfbusVzWHXIxonae0XxoQZyrZ7A2
                    4lcKU7VCwjha8QM8MnONPPOkw0+a6NUWxlUtV/mVC5qp5jr6OihpJFMREMOkilqI
                    lpTHiwwsydy3L08qeg44UTpqDeYvq8x0OENvOykCgYAUydSoX02sExY78jwNzsoW
                    9agbhCOoZZed0DhG1vGhjAxXZzl+2wyIHkNYgcuMalSOmVDzXsRe0d04MiHj28sV
                    TIGSx4h1qA5z341M99/bnRIHOqse1Qi1zAhY3nsXKWS8QPQepYuGLwqGhWVm0LRe
                    uKWdWM5l6TmYKWkzikqF8QKBgHkb/ygKYfuQV8fx2nZR+VW1d6D+SuGdplkSdQbJ
                    doV1i41lLsmh4sANRcRCTJPmaRDBIyRnK2NJt8/fr9HqSTtY7zytVSjTlUP8pUal
                    rk8aWHWjISS0X2i2DNiuMnCxXbN/Pw9/w7JWGKyceP2P8s3NGEDru+mKIV31tA7b
                    5N8ZAoGAe7XXyNy+FMy5dIjf5Mcu37E8W6/K102QiHJWSgjyCCAW3geZsfijPF5H
                    7DmuPqJd3gHJsoXuGmZ1wuWFH9XSDejuXNZRQk8e2h3i0wBb+P6KDL8Snqj9NmuA
                    Q/jOgCZxR4NVjw1AIc4yzDLYEcNgPvHKja0p2F0jeXq0hq+OyJk=
                    -----END RSA PRIVATE KEY-----
      catalog:
        import: 
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, Group, Resource, Location, Template, API]
        locations:
          - type: url
            target: https://github.com/idp-myocp/backstage-showcase/blob/main/catalog-entities/all.yaml
          - type: url
            target: https://github.com/idp-myocp/goldenpath-template/blob/main/template-index.yaml
        providers:
          keycloakOrg:
            default:
              baseUrl: "{{ .Values.global.keycloak.prefixBaseUrl }}"
              loginRealm: "{{ .Values.global.keycloak.backstageClient.id }}"
              realm: "{{ .Values.global.keycloak.backstageClient.realm }}"
              clientId: "{{ .Values.global.keycloak.backstageClient.id }}"
              clientSecret: "{{ .Values.global.keycloak.backstageClient.secret }}"
              schedule:
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
          github:
            systems:
              organization: 'idp-myocp' # string
              catalogPath: '/systems/*.yaml' # string
              filters:
                branch: 'main' # string
                repository: 'demo-systems' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
            systemEntities:
              organization: 'idp-myocp' # string
              catalogPath: '/catalog-info.yaml' # string
              filters:
                branch: 'master' # string
                repository: '.*' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
      auth:
        environment: production
        providers:
          oauth2Proxy: {}

    extraEnvVars:
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: "{{ .Release.Name }}-db-postgresql"
    - name: GITHUB_PRIVATEKEY
      valueFrom:
         secretKeyRef:
           key: idp-private-key
           name: "{{ .Release.Name }}-idp-github"
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          key: token
          name: "{{ .Release.Name }}-git-auth"
    - name: CA_CERT
      valueFrom:
        secretKeyRef:
          key: ca.crt
          name: "{{ .Release.Name }}-db-postgresql-tls" # Should match with the name of the secret where the CA for the postgresql server is stored
    - name: CONFLUENCE_URL
      value: "{{ .Values.global.backstage.confluence.url }} "
    - name: CONFLUENCE_USERNAME
      value: "{{ .Values.global.backstage.confluence.user }} "
    - name: CONFLUENCE_PASSWORD
      value: "{{ .Values.global.backstage.confluence.password }} "
    extraContainers:
    - name: "oauth2-proxy"
      env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "{{ .Values.global.keycloak.backstageClient.id }}"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: "{{ .Values.global.keycloak.backstageClient.secret }}"
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: 'fksdZJWUhzlfGw3Ve6POYc2jmjZogjCh'
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: "{{ .Values.global.keycloak.backstageClient.oidcIssuerUrl }}"
        - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
          value: 'true'
      ports:
        - name: "oauth2-proxy"
          containerPort: 4180
          protocol: TCP
      imagePullPolicy: IfNotPresent
      image: "quay.io/oauth2-proxy/oauth2-proxy:latest"
      args:
        - '--provider=oidc'
        - '--email-domain=*'
        - '--upstream=http://localhost:7007'
        - '--http-address=0.0.0.0:4180'
        - '--skip-provider-button'

  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy

  postgresql:
    enabled: false #Disabled when using an external connection

  ingress:
    enabled: false

# -- OpenShift Route parameters
route:

  # -- Route specific annotations
  annotations: {}

  # -- Enable the creation of the route resource
  enabled: true

  # -- Set the host attribute to a custom value. If not set, OpenShift will generate it, please make sure to match your baseUrl
  host: "{{ .Values.global.host }}"

  # -- Path that the router watches for, to route traffic for to the service.
  path: "/"

  # -- Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
  wildcardPolicy: None

  # -- Route TLS parameters
  # <br /> Ref: https://docs.openshift.com/container-platform/4.9/networking/routes/secured-routes.html
  tls:

    # -- Enable TLS configuration for the host defined at `route.host` parameter
    enabled: true

    # -- Specify TLS termination.
    termination: "edge"

    # -- Certificate contents
    certificate: ""

    # -- Key file contents
    key: ""

    # -- Cert authority certificate contents. Optional
    caCertificate: ""

    # -- Contents of the ca certificate of the final destination.
    # <br /> When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
    destinationCACertificate: ""

    # --  Indicates the desired behavior for insecure connections to a route.
    # <br /> While each router may make its own decisions on which ports to expose, this is normally port 80. The only valid values are None, Redirect, or empty for disabled.
    insecureEdgeTerminationPolicy: "Redirect"

github:
  token: "{{ .Values.global.github.token }}"