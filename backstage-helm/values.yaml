global:
  # -- Shorthand for users who do not want to specify a custom HOSTNAME. Used ONLY with the DEFAULT upstream.backstage.appConfig value and with OCP Route enabled.
  clusterRouterBase: app.example.com
  # -- Custom hostname shorthand, overrides `global.clusterRouterBase`, `upstream.ingress.host`, `route.host`, and url values in `upstream.backstage.appConfig`
  host: ""
  argocd:
    token: changeme
  github:
    token: changeme
    appId: appid
    clientId: clientId
    clientSecret: clientSecret
    webhookUrl: webhookUrl
    webhookSecret: webhookSecret
  keycloak:
    prefixBaseUrl: "https://sso.myocp.net"
    backstageClient:
      id: "backstage"
      realm: OpenShift
      secret: my-secret
      oidcIssuerUrl: "https://sso.myocp.net/realms/OpenShift"

dynamic:
      plugins:
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: true

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
# @default -- Use Openshift compatible settings
upstream:
  nameOverride: backstage
  backstage:
    image:
      registry: image-registry.openshift-image-registry.svc:5000
      repository: developer-hub/backstage-showcase
      tag: latest
    command: []
    # FIXME (tumido): USE POSTGRES_PASSWORD and POSTGRES_USER instead of POSTGRES_ADMIN_PASSWORD
    # This is a hack. In {fedora,rhel}/postgresql images, regular user is forbidden
    # from creating DBs in runtime. A single DB can be created ahead of time via
    # POSTGRESQL_DATABASE env variable (in this case via
    # upstream.postgresql.primary.extraEnvVars value), but this doesn't allow us to
    # create multiple DBs. Since Backstage requires by default 5 different DBs, we
    # can't accommodate that properly.
    appConfig:
      app:
        # Please update to match host in case you don't want to configure hostname via `global.clusterRouterBase` or `global.host`.
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          client: pg
          connection:
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
            host: "{{ .Release.Name }}-db-postgresql" #Matches with the host of the deployed postgresql instance
            port: 5432
            ssl:
              ca: ${CA_CERT}
              require: true
              rejectUnauthorized: true
        csp:
          img-src:
            # "'self'" and 'data' are from the backstage default but must be set since img-src is overriden
            - "'self'"
            - 'data:'
            # Allow your Jira instance for @roadiehq/backstage-plugin-jira
            - 'JIRA_URL'
        auth:
          keys:
            - secret: u95WN24xnXu7OUQL5j1qAAVC3TF9Re6
      integrations:           
        github:
          - host: github.com
            apps:
              - appId: "{{ .Values.global.github.appId }}"
                clientId: "{{ .Values.global.github.clientId }}"
                clientSecret: "{{ .Values.global.github.clientSecret }}"
                webhookUrl: "{{ .Values.global.github.webhookUrl }}"
                webhookSecret: "{{ .Values.global.github.webhookSecret }}"
                privateKey: |
                        ${GITHUB_PRIVATEKEY}
 
        # Plugin: ArgoCD
      argocd:
          appLocatorMethods:
            - type: 'config'
              instances:
               - name: main
                 token: "{{ .Values.global.argocd.token }}"
                 url: https://argocd-for-dev-server-argocd-dev-instance.apps.home.myocp.net/
      proxy:
        # Plugin: Jira
        '/jira/api':
            target: "{{ .Values.global.jira.url }}"
        headers:
           Authorization: ${JIRA_TOKEN}
           Accept: 'application/json'
           Content-Type: 'application/json'
           X-Atlassian-Token: 'no-check'
           User-Agent: "MY-UA-STRING"
      catalog:
        import: 
          entityFilename: catalog-info.yaml
          pullRequestBranchName: backstage-integration
        rules:
          - allow: [Component, System, Group, Resource, Location, Template, API]
        locations:
          - type: url
            target: https://github.com/idp-myocp/backstage-showcase/blob/main/catalog-entities/all.yaml
          - type: url
            target: https://github.com/idp-myocp/goldenpath-template/blob/main/template-index.yaml
        providers:
          keycloakOrg:
            default:
              baseUrl: "{{ .Values.global.keycloak.prefixBaseUrl }}"
              loginRealm: "{{ .Values.global.keycloak.backstageClient.id }}"
              realm: "{{ .Values.global.keycloak.backstageClient.realm }}"
              clientId: "{{ .Values.global.keycloak.backstageClient.id }}"
              clientSecret: "{{ .Values.global.keycloak.backstageClient.secret }}"
              schedule:
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
          github:
            systems:
              organization: 'idp-myocp' # string
              catalogPath: '/systems/*.yaml' # string
              filters:
                branch: 'main' # string
                repository: 'demo-systems' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
            systemEntities:
              organization: 'idp-myocp' # string
              catalogPath: '/catalog-info.yaml' # string
              filters:
                branch: 'master' # string
                repository: '.*' # Regex
              schedule: # optional
                frequency: { minutes: 1 }
                timeout: { minutes: 1 }
                initialDelay: { seconds: 15 }
      auth:
        environment: production
        providers:
          oauth2Proxy: {}
          github:
            production:
              clientId: "{{ .Values.global.github.clientId }}"
              clientSecret: "{{ .Values.global.github.clientSecret }}"
    extraEnvVars:
    - name: POSTGRESQL_ADMIN_PASSWORD
      valueFrom:
        secretKeyRef:
          key: postgres-password
          name: "{{ .Release.Name }}-db-postgresql"
    - name: GITHUB_PRIVATEKEY
      valueFrom:
         secretKeyRef:
           key: idp-private-key
           name: "{{ .Release.Name }}-idp-github"
    - name: GITHUB_TOKEN
      valueFrom:
        secretKeyRef:
          key: token
          name: "{{ .Release.Name }}-git-auth"
    - name: CA_CERT
      valueFrom:
        secretKeyRef:
          key: ca.crt
          name: "{{ .Release.Name }}-db-postgresql-tls" # Should match with the name of the secret where the CA for the postgresql server is stored
    - name: CONFLUENCE_URL
      value: "{{ .Values.global.backstage.confluence.url }} "
    - name: CONFLUENCE_PASSWORD
      value: "{{ .Values.global.backstage.confluence.password }} "
    - name: JIRA_URL
      value: "{{ .Values.global.backstage.jira.url }}"
    - name: ATLASSIAN_USERNAME
      value: "{{ .Values.global.backstage.atlassian.user }}"
    - name: JIRA_TOKEN
      value: "Basic {{ .Values.global.backstage.jira.token }}"


    extraContainers:
    - name: "oauth2-proxy"
      env:
        - name: OAUTH2_PROXY_CLIENT_ID
          value: "{{ .Values.global.keycloak.backstageClient.id }}"
        - name: OAUTH2_PROXY_CLIENT_SECRET
          value: "{{ .Values.global.keycloak.backstageClient.secret }}"
        - name: OAUTH2_PROXY_COOKIE_SECRET
          value: 'fksdZJWUhzlfGw3Ve6POYc2jmjZogjCh'
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          value: "{{ .Values.global.keycloak.backstageClient.oidcIssuerUrl }}"
        - name: OAUTH2_PROXY_SSL_INSECURE_SKIP_VERIFY
          value: 'true'
      ports:
        - name: "oauth2-proxy"
          containerPort: 4180
          protocol: TCP
      imagePullPolicy: IfNotPresent
      image: "quay.io/oauth2-proxy/oauth2-proxy:latest"
      args:
        - '--provider=oidc'
        - '--email-domain=*'
        - '--upstream=http://localhost:7007'
        - '--http-address=0.0.0.0:4180'
        - '--skip-provider-button'
        - '--code-challenge-method=S256'

  service:
    ports:
      backend: 4180
      targetPort: oauth2-proxy

  postgresql:
    enabled: false #Disabled when using an external connection

  ingress:
    enabled: false

# -- OpenShift Route parameters
route:

  # -- Route specific annotations
  annotations: {}

  # -- Enable the creation of the route resource
  enabled: true

  # -- Set the host attribute to a custom value. If not set, OpenShift will generate it, please make sure to match your baseUrl
  host: "{{ .Values.global.host }}"

  # -- Path that the router watches for, to route traffic for to the service.
  path: "/"

  # -- Wildcard policy if any for the route. Currently only 'Subdomain' or 'None' is allowed.
  wildcardPolicy: None

  # -- Route TLS parameters
  # <br /> Ref: https://docs.openshift.com/container-platform/4.9/networking/routes/secured-routes.html
  tls:

    # -- Enable TLS configuration for the host defined at `route.host` parameter
    enabled: true

    # -- Specify TLS termination.
    termination: "edge"

    # -- Certificate contents
    certificate: ""

    # -- Key file contents
    key: ""

    # -- Cert authority certificate contents. Optional
    caCertificate: ""

    # -- Contents of the ca certificate of the final destination.
    # <br /> When using reencrypt termination this file should be provided in order to have routers use it for health checks on the secure connection. If this field is not specified, the router may provide its own destination CA and perform hostname validation using the short service name (service.namespace.svc), which allows infrastructure generated certificates to automatically verify.
    destinationCACertificate: ""

    # --  Indicates the desired behavior for insecure connections to a route.
    # <br /> While each router may make its own decisions on which ports to expose, this is normally port 80. The only valid values are None, Redirect, or empty for disabled.
    insecureEdgeTerminationPolicy: "Redirect"

github:
  token: "{{ .Values.global.github.token }}"

